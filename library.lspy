; Atoms
(def {nil} {})
(def {true} 1)
(def {false} 0)

; Function Definitions
(def {fun} (\ {f b} {
  def (head f) (\ (tail f) b)
}))

; Unpack List for Function
(fun {unpack f l} {
  eval (join (list f) l)
})

; Pack list for Function
(fun {pack f & xs} {f xs})

; Curried and Uncurried calling
(def {curry} unpack)
(def {uncurry} pack)

; Perform several things in sequence
(fun {do & l} {
  if (== l nil)
    {nil}
    {last l}
})

; Open new scope
(fun {let b} {
  ((\ {_} b) ())
})

; Logical Functions (pretty cool)
(fun {not x} {- 1 x})
(fun {or x y} {+ x y})
(fun {and x y} {* x y})

; 1st, 2nd, and 3rd item in list
(fun {fst l} { eval (head l) })
(fun {snd l} { eval (head (tail l)) })
(fun {trd l} { eval (head (tail (tail l))) })

; list length
(fun {len l} {
  if (== l nil)
    {0}
    {+ 1 (len (tail l))}
})

; nth item in list
(fun {nth n l} {
  if (== n 0)
    {fst l}
    {nth (- n 1) (tail l)}
})

; last item in list
(fun {last l} {
  nth (- (len l) 1) l
})

; apply function to list
(fun {map f l} {
  if (== 1 nil)
    {nil}
    {join (list (f (fst l))) (map f (tail l))}
})

(fun {select & cs} {
  if (== cs nil)
    {error "No Selection Found"}
    {if (fst (fst cs)) {snd (fst cs)} {unpack select (tail cs)}}
})

; default case
(def {otherwise} true)

(fun {case x & cs} {
  if (== cs nil)
    {error "No Case Found"}
    {if (== x (fst (fst cs))) {snd (fst cs)} {
      unpack case (join (list x) (tail cs))}}
})

